from imgaug import augmenters as iaa
import xml.etree.ElementTree as ET
import imgaug as ia
import imageio
import os
import numpy as np

# Define your augmentation sequence
seq = iaa.Sequential([
    iaa.Fliplr(0.5),  # 50% chance to flip horizontally
    iaa.Affine(
        scale={"x": (0.8, 1.2), "y": (0.8, 1.2)},
        translate_percent={"x": (-0.2, 0.2), "y": (-0.2, 0.2)},
        rotate=(-25, 25)
    )
])

def load_bounding_boxes(xml_path):
    tree = ET.parse(xml_path)
    root = tree.getroot()
    bboxes = []
    for member in root.findall('object'):
        bndbox = member.find('bndbox')
        xmin = int(bndbox.find('xmin').text)
        ymin = int(bndbox.find('ymin').text)
        xmax = int(bndbox.find('xmax').text)
        ymax = int(bndbox.find('ymax').text)
        bboxes.append((xmin, ymin, xmax, ymax))
    return bboxes


def save_augmented_data(image_aug, bbs_aug, image_path, xml_path, augmentation_index):
    augmented_image_path = f"{image_path}_aug_{augmentation_index}.jpg"
    augmented_xml_path = f"{xml_path}_aug_{augmentation_index}.xml"
    imageio.imwrite(augmented_image_path, image_aug)
    
    # Create a new XML file for the augmented bounding boxes
    root = ET.Element("annotation")
    for bbox in bbs_aug.bounding_boxes:
        obj = ET.SubElement(root, "object")
        bndbox = ET.SubElement(obj, "bndbox")
        ET.SubElement(bndbox, "xmin").text = str(int(bbox.x1))
        ET.SubElement(bndbox, "ymin").text = str(int(bbox.y1))
        ET.SubElement(bndbox, "xmax").text = str(int(bbox.x2))
        ET.SubElement(bndbox, "ymax").text = str(int(bbox.y2))
    
    tree = ET.ElementTree(root)
    tree.write(augmented_xml_path)
    print(f"Saved {augmented_image_path} and {augmented_xml_path}")

# Directory containing images
image_dir = '/home/jude/Work/Store Pass/card_recognition_ml/labelImg/.data/original/'
image_files = [os.path.join(image_dir, f) for f in os.listdir(image_dir) if f.endswith('.jpg')]

for image_path in image_files:
    xml_path = os.path.splitext(image_path)[0] + '.xml'  # Assuming XML file has same basename as image
    image = imageio.imread(image_path)
    bounding_boxes = load_bounding_boxes(xml_path)
    bbs = ia.BoundingBoxesOnImage([
        ia.BoundingBox(x1=x1, y1=y1, x2=x2, y2=y2) for x1, y1, x2, y2 in bounding_boxes
    ], shape=image.shape)
    
    for i in range(10):  # Augment each image 10 times
        image_aug, bbs_aug = seq(image=image, bounding_boxes=bbs)
        save_augmented_data(image_aug, bbs_aug, os.path.splitext(image_path)[0], os.path.splitext(xml_path)[0], i)